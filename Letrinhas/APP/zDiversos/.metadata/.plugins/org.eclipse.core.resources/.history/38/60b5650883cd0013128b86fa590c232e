/*
 * Esta classe serve para calcular todos os possiveis parâmetros de avaliação dos testes realizados
 * @author Dário
 */

package com.letrinhas03.util;

public class Avaliacao {
	public float plm,pl,vl;
	public int express, ritmo;
	private int plvErradas, pontua, vacil, fragment, silabs, repeti;

	public void decPalErrada() {
		if (plvErradas != 0)
			plvErradas--;
	}
	
	public void incPalErrada() {
		plvErradas++;
	}

	public int getPlvErradas() {
		return plvErradas;
	}

	public void decPontua() {
		if (pontua != 0)
			pontua--;
	}
	
	public void incPontua() {
		pontua++;
	}

	public int getPontua() {
		return pontua;
	}

	public void decVacil() {
		if (vacil != 0)
			vacil--;
	}
	
	public void incVacil() {
		vacil++;
	}
	
	public int getVacil() {
		return vacil;
	}

	public void decFragment() {
		if (fragment != 0)
			fragment--;
	}
	
	public void incFragment() {
		fragment++;
	}
	
	public int getFragment() {
		return fragment;
	}

	public void decSilabs() {
		if (silabs != 0)
			silabs--;
	}
	
	public void incSilabs() {
		silabs++;
	}
	
	public int getSilabs() {
		return silabs;
	}

	public void decRepeti() {
		if (repeti != 0)
			repeti--;
	}
	
	public void incRepeti() {
		repeti++;
	}
	
	public int getRepeti() {
		return repeti;
	}


	/**
	 * palavras lidas por minuto
	 * @author Dário
	 */
	public float PLM(int minutos, int segundos,int totalDePalavrasLidas){
		minutos = minutos + (segundos/60);
		return  (totalDePalavrasLidas / minutos)*60;
	}
	
	/**
	 * precisão na leitura
	 * @author Dário
	 */
	public float PL(int totalDePalavras, int palavrasCertas){
		return (palavrasCertas/totalDePalavras)*100;
	}
	
	/**
	 * velocidade de leitura
	 * @author Dário
	 */
	public float VL(int minutos, int segundos,int totalDePalavras, int palavrasErradas){
		minutos = minutos + (segundos/60);
		int palavrasCertas = totalDePalavras - palavrasErradas;
		return  (palavrasCertas / minutos)*60;
	}
		
	/**
	 * calculo do nº todal de sinais de pontuação menos os sinais de pontuação desrespeitados
	 * @author Dário
	 */
	public int Expressividade(int TotalDeSinaisPontuacao, int SinaisDesrespeitados){
		return TotalDeSinaisPontuacao - SinaisDesrespeitados;
	}
	
	/**
	 * calculo do nº total de palavras menos o total de falhas(repetições, vacilações, silibações e fragmentações)
	 * @author Dário
	 */
	public int Ritmo(int totalDePalavras, int fragmentacoes, int vacilacoes, int silibacoes, int repeticoes){
		return totalDePalavras - (fragmentacoes + vacilacoes + silibacoes + repeticoes);
	}
	
}
