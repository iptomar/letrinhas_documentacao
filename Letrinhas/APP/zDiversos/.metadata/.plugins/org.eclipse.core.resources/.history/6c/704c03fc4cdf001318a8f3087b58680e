package com.letrinhas05.escolhe;

import java.util.List;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.letrinhas05.*;
import com.letrinhas05.BaseDados.LetrinhasDB;
import com.letrinhas05.ClassesObjs.Teste;
import com.letrinhas05.util.SystemUiHider;

/**
 * 
 * @author Thiago
 * 
 */
public class EscolheTeste extends Activity {
	Button volt, exect;
	public int nTestes, numero = 0, alunoId,tipo;
	String teste;
	String[] lista, Nomes, array, titulo;
	int[]  idTestes, ids;
	LetrinhasDB ldb;

	protected int idArea, idTipo; // ////IDaREA IDTIPO DE TESTE
	protected String nomeDsiciplina;
	/**
	 * Whether or not the system UI should be auto-hidden after
	 * {@link #AUTO_HIDE_DELAY_MILLIS} milliseconds.
	 */
	private static final boolean AUTO_HIDE = true;
	/**
	 * If {@link #AUTO_HIDE} is set, the number of milliseconds to wait after
	 * user interaction before hiding the system UI.
	 */
	private static final int AUTO_HIDE_DELAY_MILLIS = 1000;
	/*********************************************************************
	 * The flags to pass to {@link SystemUiHider#getInstance}.
	 */
	private static final int HIDER_FLAGS = SystemUiHider.FLAG_HIDE_NAVIGATION;
	/**
	 * The instance of the {@link SystemUiHider} for this activity.
	 */
	private SystemUiHider mSystemUiHider;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.escolhe_teste);

		// recebe o parametro de modo
		Bundle b = getIntent().getExtras();
		ids = b.getIntArray("IDs");
		Nomes = b.getStringArray("Nomes");
		alunoId = ids[3];
		idArea = b.getInt("idDisciplina");
		idTipo = b.getInt("TipoTesteid");
		nomeDsiciplina = b.getString("Disiciplina");
		
		Log.e("CENAS", idArea + " " + idTipo); // Error
		//disciplina
		TextView tvd= ((TextView)findViewById(R.id.escTDisciplina));
		tvd.setText(b.getString("Disciplina"));
		ImageView imgD = new ImageView(this);
		switch(idArea){
		case 1:
			imgD.setImageResource(R.drawable.pt);// Português
			break;
		case 2:
			imgD.setImageResource(R.drawable.mat);// Matemática
			break;
		case 3:
			imgD.setImageResource(R.drawable.estmeio);// Estudo do meio
			break;
		case 4:
			imgD.setImageResource(R.drawable.en);// English
			break;
		}
		tvd.setCompoundDrawables(null, null, imgD.getDrawable(), null);
		
		//tipo
		 imgD = (ImageView)findViewById(R.id.escTivTipo);
		 switch (idTipo){
		 case 0:
			 imgD.setImageResource(R.drawable.textos);
			 break;
		 case 1:
			 imgD.setImageResource(R.drawable.imags);
			 break;
		 case 2:
			 imgD.setImageResource(R.drawable.palavras);
			 break;
		 }
		

		volt = (Button) findViewById(R.id.escTVoltar);
		exect = (Button) findViewById(R.id.ibComecar);

		// new line faz a rotação do ecrãn em 180 graus
		int currentOrientation = getResources().getConfiguration().orientation;
		if (currentOrientation == Configuration.ORIENTATION_LANDSCAPE) {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
		} else {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT);
		}

		// esconder o title************************************************+
		final View contentView = findViewById(R.id.escTeste);

		// Set up an instance of SystemUiHider to control the system UI for
		// this activity.
		mSystemUiHider = SystemUiHider.getInstance(this, contentView,
				HIDER_FLAGS);
		mSystemUiHider.setup();
		mSystemUiHider
				.setOnVisibilityChangeListener(new SystemUiHider.OnVisibilityChangeListener() {
					// Cached values.
					int mShortAnimTime;

					@Override
					@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
					public void onVisibilityChange(boolean visible) {
						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
							if (mShortAnimTime == 0) {
								mShortAnimTime = getResources().getInteger(
										android.R.integer.config_shortAnimTime);
							}
						}

						if (visible && AUTO_HIDE) {
							// Schedule a hide().
							delayedHide(AUTO_HIDE_DELAY_MILLIS);
						}
					}
				});

		/************************************************************************
		 * Criação de um painel dinâmico para os botões de seleção dos testes
		 * existentes.
		 */

		ldb = new LetrinhasDB(this);
		// if getAllTesteByAreaIdAndTwoTypes
		List<Teste> dados;
		if (idTipo == 0)
			//texto e / ou poemas
			dados = ldb.getAllTesteByAreaIdAndTwoTypes(idArea, idTipo, 3);
		else
			//imagens ou lista
			dados = ldb.getAllTesteByAreaIdAndType(idArea, idTipo);
		
		tipo=dados.get(0).getTipo();
		
		array = new String[dados.size()];
		titulo = new String[dados.size()];
		idTestes = new int[dados.size()];
		for (Teste cn : dados) {
			// String storage =
			// cn.getIdTeste()+","+cn.getTitulo().toString()+","+cn.getTexto().toString()+","+cn.getTipo()+","+cn.getDataInsercaoTeste()+","+cn.getGrauEscolar();
			String storage = cn.getIdTeste() + "," + cn.getTitulo().toString()
					+ "," + cn.getTexto().toString() + "," + cn.getTipo();
			Log.d("letrinhas-Store", storage.toString());
			array[numero] = storage.toString();
			Log.d("letrinhas-Array", array[numero].toString());
			titulo[numero] = cn.getTitulo();
			Log.d("letrinhas-Titulo", titulo[numero].toString());
			idTestes[numero] = cn.getIdTeste();
			Log.d("letrinhas-ID", String.valueOf(idTestes[numero]));
			numero++;
		}
		// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

		// Painel dinï¿½mico
		// ****************************************************
		LinearLayout ll = (LinearLayout) findViewById(R.id.llescteste);
		// Botï¿½o original que existe por defeniï¿½ï¿½o
		ToggleButton tg1 = (ToggleButton) findViewById(R.id.escTtbtn);
		// Se existirem testes no repositï¿½rio correspondentes, cria o nï¿½ de
		// botï¿½es referentes ao nï¿½ de testes existentes
		if (0 < numero) {
			int i = 0;
			teste = titulo[i].toString();
			Log.d("Texto-Apenas", teste + " int:" + numero);
			// Atribuo o primeiro tï¿½tulo ao primeiro botï¿½o
			// ********************************+
			// texto por defeito
			tg1.setText(teste);
			// texto se nï¿½o seleccionado = "titulo do teste sem numeraï¿½ï¿½o"
			tg1.setTextOff(teste);
			// texto se seleccionado = "titulo do teste com numeraï¿½ï¿½o"
			tg1.setTextOn((i + 1) + " - " + teste);
			i++;

			// Resto do tï¿½tulos
			while (i < numero) {
				// um novo botï¿½o
				ToggleButton tg = new ToggleButton(getBaseContext());
				// copiar os parametros de layout do 1ï¿½ botï¿½o
				tg.setLayoutParams(tg1.getLayoutParams());
				tg.setTextSize(tg1.getTextSize());
				teste = titulo[i].toString();
				// texto por defeito
				tg.setText(teste);
				// texto se nï¿½o seleccionado =
				// "titulo do teste sem numeraï¿½ï¿½o"
				tg.setTextOff(teste);
				// texto se seleccionado = "titulo do teste com numeraï¿½ï¿½o"
				tg.setTextOn((i + 1) + " - " + teste);
				// inserir no scroll view
				ll.addView(tg);
				i++;
			}
		} else {
			// esconder os botï¿½es
			tg1.setVisibility(View.INVISIBLE);
			exect.setVisibility(View.INVISIBLE);

			android.app.AlertDialog alerta;
			// Cria o gerador do AlertDialog
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			// define o titulo
			builder.setTitle("Letrinhas 03");
			// define a mensagem
			builder.setMessage("Nï¿½o foram encontrados testes no repositï¿½rio");
			// define um botï¿½o como positivo
			builder.setPositiveButton("OK", null);
			// cria o AlertDialog
			alerta = builder.create();
			// Mostra
			alerta.show();

		}

		escutaBotoes();
	}

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);

		// Trigger the initial hide() shortly after the activity has been
		// created, to briefly hint to the user that UI controls
		// are available.
		delayedHide(1000);
	}

	/**
	 * Touch listener to use for in-layout UI controls to delay hiding the
	 * system UI. This is to prevent the jarring behavior of controls going away
	 * while interacting with activity UI.
	 */
	View.OnTouchListener mDelayHideTouchListener = new View.OnTouchListener() {
		@Override
		public boolean onTouch(View view, MotionEvent motionEvent) {
			if (AUTO_HIDE) {
				delayedHide(AUTO_HIDE_DELAY_MILLIS);
			}
			return false;
		}
	};

	Handler mHideHandler = new Handler();
	Runnable mHideRunnable = new Runnable() {
		@Override
		public void run() {
			mSystemUiHider.hide();
		}
	};

	/**
	 * Schedules a call to hide() in [delay] milliseconds, canceling any
	 * previously scheduled calls.
	 */
	private void delayedHide(int delayMillis) {
		mHideHandler.removeCallbacks(mHideRunnable);
		mHideHandler.postDelayed(mHideRunnable, delayMillis);
	}

	/**
	 * Procedimento para veirficar os botï¿½es
	 * 
	 * @author Thiago
	 */
	private void escutaBotoes() {
		exect.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				executarTestes();
			}
		});

		volt.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {// sair da aplicaï¿½ï¿½o
				finish();
			}
		});
	}

	/**
	 * Procedimento para executar os testes selecionados, um de cada vez sequêncialmente
	 * 
	 * @author Thiago
	 */
	public void executarTestes() {
		LinearLayout ll = (LinearLayout) findViewById(R.id.llescteste);
		// contar o nï¿½ de elementos (testes)
		int nElements = ll.getChildCount();

		int j = 0;
		// contar quantos e quais foram selecionados
		for (int i = 0; i < nElements; i++) {
			// verificar se o teste estï¿½ ativo
			if (((ToggleButton) ll.getChildAt(i)).isChecked()) {
				j++;
			}
		}
		Toast.makeText(getApplicationContext(), j + " Testes seleccionados",
				Toast.LENGTH_SHORT).show();

		// Copiar os testes seleccionados para uma lista auxiliar
		lista = new String[j];
		j = 0;
		int[] lstID = new int[j];
		for (int i = 0; i < nElements; i++) {
			if (((ToggleButton) ll.getChildAt(i)).isChecked()) {
				lista[j] = array[i];
				lstID[j] = idTestes[i];
				j++;
			}
		}

		iniciar(lstID);
	}

	// //////////////////////////////////////////////////////////////////////////////////////////
	// /////aqui em baixo tem o switch onde tem que configurar para as vossas
	// janelas teste////////////////
	// //////////////////////////////////////////////////////////////////////////////////////////

	public void iniciar(int[] lstID) {
		// iniciar os testes....
		// Se existir items seleccionados arranca com os testes,
		if (0 < lstID.length) {
			
			// enviar os parametros
			Bundle wrap = new Bundle();

			wrap.putIntArray("ListaID", lstID);//id's dos testes selecionados
			wrap.putStringArray("Nomes", Nomes);
			wrap.putIntArray("IDs", ids);

			switch (tipo) {
			case 0: // lançar a nova activity do tipo texto leitura,

				Intent it = new Intent(getApplicationContext(),
						Teste_Texto_Aluno.class);
				it.putExtras(wrap);

				startActivity(it);

				break;
			case 1:// lancar a nova activity do tipo multimedia, e o seu
					// conteudo
				Intent ip = new Intent(getApplicationContext(),
						Teste_Imagem.class);
				ip.putExtras(wrap);

				startActivity(ip);

				break;
			case 2: // lancar a nova activity do tipo LIsta, e o seu
					// conteudo
				Intent ipm = new Intent(getApplicationContext(),
						Teste_Palavras_Aluno.class);
				ipm.putExtras(wrap);

				startActivity(ipm);

				break;
			case 3: // lancar a nova activity do tipo poema, e o seu
					// conteudo
				Intent ipp = new Intent(getApplicationContext(),
						Teste_Poema_Aluno.class);
				ipp.putExtras(wrap);

				startActivity(ipp);
				break;
			default:
				Toast.makeText(getApplicationContext(),
						" - Tipo nao defenido", Toast.LENGTH_SHORT).show();
				// retirar o teste errado e continuar

				/*
				 * int k = 0; Teste aux[] = new Teste[lista.length - 1]; for
				 * (int i = 1; i < lista.length; i++) { aux[k] = lista[i]; k++;
				 * } lista = aux; iniciar(lista.length);
				 */
				break;
			}

		} else {// senao avisa que nao existe nada seleccionado
			android.app.AlertDialog alerta;
			// Cria o gerador do AlertDialog
			AlertDialog.Builder builder = new AlertDialog.Builder(this);
			// define o titulo
			builder.setTitle("Letrinhas 05");
			// define a mensagem
			builder.setMessage("Não existem testes seleccionados!");
			// define um botï¿½o como positivo
			builder.setPositiveButton("OK", null);
			// cria o AlertDialog
			alerta = builder.create();
			// Mostra
			alerta.show();
		}

	}

}
