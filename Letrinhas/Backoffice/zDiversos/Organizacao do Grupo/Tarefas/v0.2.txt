Tarefas para versão 0.2:

Servidor de Base de dados:
  [IN PROGRESS](André)-> Colaborar com o pessoal de AS para modelar as tabelas;
    (Bruno)-> Criar os scripts SQL para inserção nas tabelas.

Servidor Web:
  Reescrita de métodos:
    [DONE **(Ver notas)](Luís)-> Separar o método que devolve testes em dois: Um que faça uma listagem do sumário dos testes e outro que receba um(ns) id(s) e devolva esse(s) teste(s).
      (Luis [need help maybe!])-> Reescrever o método que devolva testes à app. Está dependente do modelo da BD de AS.
    [DONE](Alexandre)-> Reescrever o método que receba resoluções da app. É necessário preparar o método para receber dados binários em Base64 e fazer com que tais dados sejam introduzidos na BD.

  Novas funcionalidades:
    [DONE](André)-> Escrever um método que leia dados binários de uma imagem, ou de um ficheiro (api fs do Node), ou da BD. Pode-se usar uma tabela temporária com uma coluna do tipo Blob (255 Byte?) ou MediumBlob (16 MB) para testar isto.
      [DONE-ISH](André)-> Depois da tarefa acima, enviar estes dados para a app Android, convertendo primeiro para Base64! (A versão 0.1 mostra como o fazer).  
    (None)-> Criar um método que permita fazer a sincronização dos dados com a app. A app terá que dizer qual foi a última vez em que foram recebidos conteúdos antes de lhe enviarmos dados (o que é novo, e o que eliminar).
    

  Back-office:
    [Em limbo*1](None)-> Preparar formulários web de suporte à correção de testes.
    [NOT STARTED](André)-> Preparar formulários para criação de testes, entre outros.
    (Bruno)-> Fazer mockups de formulários web para o back-office.
    

  Investigação:
    [IN PROGRESS](André)-> Estudar frameworks já existentes de autenticação. Exemplo: Passport.js (passportjs.org)
    (None)-> Estudar frameworks de modulação de web sites. Exemplo: Express.js (expressjs.com)
    [Pouco prioritário](None)-> Estudar bibliotecas de data-binding e validação para os formulários do back-office. Exemplo: AngularJS (angularjs.org)
    [Em limbo*1](None)-> Estudo de APIs de HTML5 para persistência de dados locais. Exemplos: WebSQL, IndexedDB, LocalStorage. Poderá ser interessante usar uma Chrome Packaged App para isto.


App Android:
  [DONE](Alexandre)-> Enviar uma imagem para o servidor em Base64
  (DONE)(Alexandre)-> Alterar a app Android de forma a permitir que esta receba dados binários de uma imagem (a partir da rede) e mostrá-la no ecrã.
  (DONE)(Alexandre)-> Depois da tarefa acima, tentar guardar os dados na BD SQLite?

Outras:
  (Todos)-> Pensar em questões para o professor entregar aos clientes. Tais questões devem ser colocados num ficheiro à parte.
  
Versão 0.2 + 1:
  WebService + Back office:
    (None?)-> Autenticação + Autorização da app e do back-office.

Notas:
  *1 -> O professor vai perguntar se os professores têm portáteis que podem levar para uma zona com rede, semelhante aos tablets. Concordamos que, se houver demasiados computadores sem acesso à internet, formulários web estarão fora de questão, e será necessário usar algo como Java, e meter os dados das correções nos tablets.
    Q: Neste caso acima, só se descarta os formulários web para a correção de testes e mantem-se para gerir o backoffice, ou descarta-se mesmo para tudo?
** - Este método está separado em dois, um que devolve a todos os titulos e ids dos testes, outro que, enviando por querystring UM id, devolve todos os detalhes desse teste. Problema: Ainda está escrito da forma como foram criados os metodos do servidor na versão 0.1, ainda não esta da forma que o André sugeriu. Estou a trabalhar nisso!